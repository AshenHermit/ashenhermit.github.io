// Generated by CoffeeScript 1.12.7
(function() {
  var closeContextMenu, curve, curveInt, curveStart, middleDown, onContextMenu, selectedContainer, selectedOut, selectedWheel, wheelStartValue, wheelStartY;

  middleDown = false;

  selectedContainer = null;

  selectedOut = null;

  window.selectedNoteInput = null;

  curve = null;

  curveStart = {
    x: 0,
    y: 0
  };

  curveInt = 160;

  selectedWheel = null;

  wheelStartY = 0;

  wheelStartValue = 0;

  window.keyboard = new Tone.PolySynth().toMaster();

  $(document).on('mousedown', function(e) {
    if (e.button === 1) {
      middleDown = true;
      return $('.context-menu').css('transition-duration', '0s');
    }
  });

  $(document).on('mouseup', function(e) {
    selectedWheel = null;
    if (selectedOut !== void 0) {
      $(curve).remove();
      curve = void 0;
    }
    if (e.button === 0) {
      selectedContainer = null;
    }
    if (e.button === 1) {
      middleDown = false;
      return $('.context-menu').css('transition-duration', '0.1s');
    }
  });

  $(document).on('mousemove', function(e) {
    var targetPos, value;
    if (selectedWheel !== null) {
      value = wheelStartValue + (wheelStartY - e.pageY) / 350;
      if (value > 1) {
        value = 1;
      } else if (value < 0) {
        value = 0;
      }
      $(selectedWheel).attr('value', value);
      $(selectedWheel).css('transform', 'rotate(' + (300 * value - 300 / 2) + 'deg)');
      selectedWheel.onchange();
    }
    if (selectedContainer !== null) {
      $(selectedContainer).css({
        left: selectedContainer.getClientRects()[0].x + e.originalEvent.movementX / window.devicePixelRatio,
        top: selectedContainer.getClientRects()[0].y + e.originalEvent.movementY / window.devicePixelRatio
      });
      updateNodeCurves(getNodeByChild(selectedContainer).id);
      updateNodeCurves(getNodeByChild(selectedContainer).inputNodeId);
    }
    if (middleDown) {
      $('.window-container, .comment, .context-menu').toArray().forEach(function(el) {
        return $(el).css({
          left: el.getClientRects()[0].x + e.originalEvent.movementX / window.devicePixelRatio,
          top: el.getClientRects()[0].y + e.originalEvent.movementY / window.devicePixelRatio
        });
      });
      $(document.body).css({
        backgroundPositionX: parseFloat($(document.body).css('background-position-x')) + e.originalEvent.movementX / window.devicePixelRatio,
        backgroundPositionY: parseFloat($(document.body).css('background-position-y')) + e.originalEvent.movementY / window.devicePixelRatio
      });
      window.nodes.forEach(function(node) {
        if (node !== null) {
          return updateNodeCurves(node.id);
        }
      });
    }
    if (curve !== null) {
      targetPos = {
        x: (e.target.className !== "inputBox") ? e.pageX : e.target.getClientRects()[0].x + e.target.getClientRects()[0].width / 2,
        y: (e.target.className !== "inputBox") ? e.pageY : e.target.getClientRects()[0].y + e.target.getClientRects()[0].height / 2
      };
      return updateCurve(curve, curveStart.x, curveStart.y, targetPos.x, targetPos.y);
    }
  });

  $(document).on('mousedown', function(e) {
    if (e.button === 2) {
      window.mousePos.x = e.pageX;
      return window.mousePos.y = e.pageY;
    }
  });

  $(document).on('mousedown', '.title', function(e) {
    if (e.button === 0) {
      return selectedContainer = e.target.parentNode.parentNode;
    }
  });

  $(document).on('mousedown', '.output-line-box', function(e) {
    if (e.button === 0) {
      curve = document.createElementNS('http://www.w3.org/2000/svg', "path");
      curveStart.x = e.target.getClientRects()[0].x + e.target.getClientRects()[0].width / 2;
      curveStart.y = e.target.getClientRects()[0].y + e.target.getClientRects()[0].height / 2;
      $(curve).attr({
        stroke: '#f3ffc7',
        'stroke-width': '4',
        fill: 'transparent'
      });
      document.getElementsByTagName('svg')[0].append(curve);
      return selectedOut = e.target;
    }
  });

  $(document).on('mouseup', '.inputBox', function(e) {
    var nodeId, outId;
    if (getNodeByChild(e.target).id !== getNodeByChild(selectedOut) && $(selectedOut).attr('data-type') === $(e.target).attr("data-type")) {
      RemoveConnectionFromNodeInput(e.target);
      if (curve !== null) {
        nodeId = getOutBoxNodeId(selectedOut);
        outId = getOutBoxId(selectedOut);
        if (getNodeByChild(e.target).onConnect !== void 0) {
          getNodeByChild(e.target).onConnect(getOutBoxNodeId(selectedOut));
        }
        nodes[nodeId].outputs[outId].curves.push(curve);
        nodes[nodeId].outputs[outId].outputNodeIds.push(getNodeByChild(e.target).id);
        getNodeByChild(e.target).inputNodeId = nodeId;
        getNodeByChild(e.target).inputOutNodeId = outId;
      }
      selectedOut = null;
      return curve = null;
    } else {
      $(curve).remove();
      return curve = void 0;
    }
  });

  $(document).on('click', '.inputBox', function(e) {
    return RemoveConnectionFromNodeInput(e.target);
  });

  $(document).on('dblclick', '.title', function(e) {
    if ($(e.target).parent().parent().children('.inputBox').length !== 0) {
      RemoveConnectionFromNodeInput($(e.target).parent().parent().children('.inputBox')[0]);
    }
    return getNodeByChild(e.target).remove();
  });

  $(document).on('mousedown', '.parameter-wheel', function(e) {
    selectedWheel = e.target;
    wheelStartY = e.pageY;
    return wheelStartValue = parseFloat($(e.target).attr('value'));
  });

  $(document).on('mousedown', '.keyboard-key', function(e) {
    var note;
    e.preventDefault();
    note = e.target.innerText + $('[name="octave"]').val();
    keyboard.triggerAttackRelease(note, 0.1);
    if (selectedNoteInput !== null) {
      $(selectedNoteInput).val(note);
      window.selectedNoteInput.focus();
      return getNodeByChild(selectedNoteInput).updateInputs();
    }
  });

  $(document).on('focus', 'input[data-type="note"]', function(e) {
    return window.selectedNoteInput = e.target;
  });

  $(document).on('blur', 'input[data-type="note"]', function(e) {
    return window.selectedNoteInput = null;
  });

  window.RemoveConnectionFromNodeInput = function(el) {
    var err, node, nodeId, outId;
    node = getNodeByChild(el);
    if (node.inputNodeId !== -1) {
      nodeId = node.inputNodeId;
      outId = node.inputOutNodeId;
      if (node.onDisconnect !== void 0) {
        try {
          node.onDisconnect(nodeId);
        } catch (error) {
          err = error;
        }
      }
      $(nodes[nodeId].outputs[outId].curves[nodes[nodeId].outputs[outId].outputNodeIds.indexOf(node.id)]).remove();
      nodes[nodeId].outputs[outId].curves.splice(nodes[nodeId].outputs[outId].outputNodeIds.indexOf(node.id), 1);
      nodes[nodeId].outputs[outId].outputNodeIds.splice(nodes[nodeId].outputs[outId].outputNodeIds.indexOf(node.id), 1);
      return getNodeByChild(el).inputNodeId = -1;
    }
  };

  window.getOutBoxNodeId = function(el) {
    return parseInt($(el).parent().parent().parent().attr("data-id"));
  };

  window.getOutBoxId = function(el) {
    return parseInt(parseInt($(el).parent().attr("data-id")));
  };

  onContextMenu = function() {
    $('.context-menu').css({
      "pointer-events": 'auto',
      "opacity": '1',
      "left": mousePos.x - document.getElementsByClassName('context-menu')[0].clientWidth / 2,
      "top": mousePos.y
    });
    return false;
  };

  document.oncontextmenu = onContextMenu;

  closeContextMenu = function() {
    return $('.context-menu').css({
      pointerEvents: 'none',
      opacity: '0'
    });
  };

  window.closeContextMenu = closeContextMenu;

  window.updateCurve = function(curveEl, x1, y1, x2, y2) {
    return $(curveEl).attr("d", 'M ' + x1 + ' ' + y1 + ' C ' + (x1 + curveInt) + ' ' + y1 + ', ' + (x2 - curveInt) + ' ' + y2 + ', ' + x2 + ' ' + y2 + '');
  };

  window.updateNodeCurves = function(nodeId) {
    return nodes[nodeId].outputs.forEach(function(out) {
      var count;
      count = 0;
      return out.outputNodeIds.forEach(function(outNodeId) {
        updateCurve(out.curves[count], $(out.dom).children('.output-line-box')[0].getClientRects()[0].x + $(out.dom).children('.output-line-box')[0].getClientRects()[0].width / 2, $(out.dom).children('.output-line-box')[0].getClientRects()[0].y + $(out.dom).children('.output-line-box')[0].getClientRects()[0].height / 2, nodes[outNodeId].dom[0].children[0].getClientRects()[0].x + nodes[outNodeId].dom[0].children[0].getClientRects()[0].width / 2, nodes[outNodeId].dom[0].children[0].getClientRects()[0].y + nodes[outNodeId].dom[0].children[0].getClientRects()[0].height / 2);
        return count++;
      });
    });
  };

  $('*').on('click', function(e) {
    if (e.button !== 2 && e.target.className !== "context-menuline-img") {
      return closeContextMenu();
    }
  });

  window.addInputLineBeforeAddButton = function(el, value) {
    $(el).before('<input data-type="note" data-nodeId="' + $(el).attr('data-nodeId') + '" class="content-input-line" value="' + value + '">');
    return nodes[parseInt($(el).parent().parent().parent().attr('data-id'))].updateInputs();
  };

  window.getNodeByChild = function(el) {
    var curEl, i;
    curEl = el;
    for (i = 0; i < 20; i++) {
      if ($(curEl).attr('data-id') === void 0) {
        curEl = $(curEl).parent();
      }
    }
    if ($(curEl).attr('data-id') === void 0) {
      console.log("this element trying to search his node id:");
      console.log(el);
    }
    return nodes[parseInt($(curEl).attr('data-id'))];
  };

  $(document).on('keydown', function(e) {
    var node;
    node = getNodeByChild($(':focus'));
    if (e.originalEvent.keyCode === 13) {
      if ($(':focus')[0].tagName === "INPUT") {
        if ($(':focus').val() === "") {
          $(':focus').remove();
        }
      }
      return node.updateInputs();
    }
  });

  $('#bpmInput').change(function(e) {
    return window.bpm = parseInt($(this).val());
  });

}).call(this);

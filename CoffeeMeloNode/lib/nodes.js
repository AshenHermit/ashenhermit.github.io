// Generated by CoffeeScript 1.12.7
(function() {
  var ArpegioMIDI, Delay, Distortion, ListOfNotes, Mix, Node, Oscillator, RandomMIDI, Reverb, addNode, addNodeFromContenxt,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.noteSprite = "---##-\n---#--\n-###--\n-###--\n-###--";

  Node = (function() {
    function Node(x1, y1, cw, ch, outputs1, inputType) {
      var content, inputBox, outputCount, outputElements;
      this.x = x1;
      this.y = y1;
      this.outputs = outputs1;
      this.inputType = inputType;
      this.id = window.lastId;
      window.lastId++;
      this.canvas = document.createElement('CANVAS');
      this.canvas.width = cw;
      this.canvas.height = ch;
      this.canvas.style.width = this.canvas.width * 2 + "px";
      this.canvas.style.height = this.canvas.height * 2 + "px";
      this.canvas.id = "nodeCanvas_" + this.id;
      this.ctx = this.canvas.getContext('2d');
      this.inputNodeId = -1;
      this.inputOutNodeId = -1;
      outputElements = '';
      outputCount = 0;
      inputBox = (this.inputType !== null ? '<div data-type="' + this.inputType + '" class="inputBox"></div>' : '');
      content = "<div style=\"left:" + this.x + "px;top:" + this.y + "px;\" data-id=" + this.id + " class=\"window-container\" style=\"left: 0;top: 0;\">" + inputBox + "<div class=\"window\">\n	<div class=\"title\">" + this.title + "</div>\n	<div class=\"content\"></div>\n</div>" + (this.outputs.length !== 0 ? '<div class="outputs"></div>' : '') + "</div>";
      $('body').append(content);
      if (cw !== 0) {
        $('.content').last().append(this.canvas);
      }
      if (this.addContent !== void 0) {
        $('.content').last().append(this.addContent);
      }
      this.outputs.forEach(function(output) {
        var outputElement;
        outputElement = "<div data-id='" + outputCount + "' class=\"output-line\">\n<div class=\"output-line-text\">" + output.name + "</div>\n<div data-type='" + output.type + "' class=\"output-line-box\"></div>\n</div>";
        $('.outputs').last().append(outputElement);
        output.dom = $('.output-line').last();
        output.outputNodeIds = [];
        output.curves = [];
        return outputCount++;
      });
      this.dom = $('.window-container').last();
      this.content = $('.content').last();
      this.addParameters();
    }

    Node.prototype.update = function(time) {};

    Node.prototype.remove = function() {
      this.outputs.forEach(function(out) {
        out.outputNodeIds.forEach(function(outNodeId) {
          return nodes[outNodeId].inputNodeId = -1;
        });
        return out.curves.forEach(function(curve) {
          return $(curve).remove();
        });
      });
      $(this.dom).remove();
      return nodes[this.id] = null;
    };

    Node.prototype.addParameters = function() {
      var append, id;
      if (this.parameters !== void 0) {
        append = "";
        id = this.id;
        this.parameters.forEach(function(parameter) {
          var appendTmp;
          if (parameter.type === "dropdown") {
            appendTmp = '<div style="display: flex;"><div style="padding-top: 0.5em;">' + parameter.name + ':</div><select onchange="getNodeByChild(this).onParametersChange();" data-param-id="' + id + parameter.name + '" class="content-input-line">';
            parameter.values.forEach(function(value) {
              return appendTmp += '<option ' + ((value === parameter.current) ? 'selected' : '') + ' value="' + value + '">' + value + '</option>';
            });
            appendTmp += '</select></div>';
            append += appendTmp;
          }
          if (parameter.type === "float") {
            return append += '<div><div data-param-id="' + id + parameter.name + '" value="' + parameter.current + '" style="transform: rotate(' + (300 * parameter.current - 300 / 2) + 'deg);" class="parameter-wheel" onchange="getNodeByChild(this).onParametersChange();">\n    <div class="parameter-wheel-pointer"></div>\n</div>' + parameter.name + '</div>';
          }
        });
        this.content.append(append);
        return this.onParametersChange();
      }
    };

    Node.prototype.onParametersChange = function() {};

    Node.prototype.getParameterValue = function(paramName) {
      if ($('[data-param-id="' + this.id + paramName + '"]').val() !== "") {
        return $('[data-param-id="' + this.id + paramName + '"]').val();
      } else {
        return $('[data-param-id="' + this.id + paramName + '"]').attr('value');
      }
    };

    return Node;

  })();

  ListOfNotes = (function(superClass) {
    extend(ListOfNotes, superClass);

    function ListOfNotes(x, y) {
      var count, lines, outputs;
      this.title = "List Of Notes";
      outputs = [
        {
          name: 'notes list',
          type: 'note_array'
        }
      ];
      this.listOfNotes = ['G3', 'G4', 'D5', 'D#4', 'A#4', 'D#3', 'D4', 'A4'];
      lines = '';
      count = 0;
      this.listOfNotes.forEach(function(note) {
        lines += '<input data-type="note" data-nodeId="' + window.lastId + '" data-listId="' + count + '" class="content-input-line" value="' + note + '">';
        return count++;
      });
      this.addContent = lines + '<div data-nodeId="' + window.lastId + '" onclick="addInputLineBeforeAddButton(this,' + new String("'") + 'C4' + new String("'") + ')" class="content-add-button">+</div>';
      ListOfNotes.__super__.constructor.call(this, x, y, 0, 0, outputs, null);
    }

    ListOfNotes.prototype.update = function(time) {};

    ListOfNotes.prototype.updateList = function() {
      var count, lines;
      $(this.dom).children(".window").children(".content").html("");
      lines = '';
      count = 0;
      this.listOfNotes.forEach(function(note) {
        lines += '<input data-type="note" data-nodeId="' + window.lastId + '" data-listId="' + count + '" class="content-input-line" value="' + note + '">';
        return count++;
      });
      this.addContent = lines + '<div data-nodeId="' + window.lastId + '" onclick="addInputLineBeforeAddButton(this,' + new String("'") + 'C4' + new String("'") + ')" class="content-add-button">+</div>';
      return $(this.dom).children(".window").children(".content").html(this.addContent);
    };

    ListOfNotes.prototype.loadJSON = function(json) {
      this.listOfNotes = JSON.parse(json);
      return this.updateList();
    };

    ListOfNotes.prototype.updateInputs = function() {
      var array, el, i, ref;
      this.listOfNotes = [];
      array = $('.content-input-line[data-nodeId="' + this.id + '"]').toArray();
      for (el = i = 0, ref = array.length; 0 <= ref ? i < ref : i > ref; el = 0 <= ref ? ++i : --i) {
        this.listOfNotes.push($(array[el]).val());
      }
      return updateNodeCurves(this.id);
    };

    return ListOfNotes;

  })(Node);

  RandomMIDI = (function(superClass) {
    extend(RandomMIDI, superClass);

    function RandomMIDI(x, y) {
      var outputs;
      this.title = "Random MIDI";
      outputs = [
        {
          name: 'midi out',
          type: 'midi',
          value: 'C2'
        }
      ];
      this.parameters = [
        {
          name: "duration",
          current: 0.1,
          type: "float",
          hasInput: false
        }, {
          name: "speed",
          current: 0.75,
          type: "float",
          hasInput: false
        }
      ];
      this.speed = 0;
      this.currentMidi = {
        note: "-",
        duration: 0.2
      };
      RandomMIDI.__super__.constructor.call(this, x, y, 16, 64, outputs, "note_array");
    }

    RandomMIDI.prototype.update = function(time) {
      var err, i, outId, rand, ref, results, scale;
      try {
        scale = 16;
        this.ctx.fillStyle = $('.window').css('backgroundColor');
        this.ctx.globalAlpha = 0.1;
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
        rand = Math.floor(Math.random() * nodes[this.inputNodeId].listOfNotes.length);
        if (time % this.speed === 0) {
          this.ctx.fillStyle = "#fff";
          this.ctx.globalAlpha = 1;
          this.ctx.fillRect(0, Math.round((64 / nodes[this.inputNodeId].listOfNotes.length) * rand), scale, Math.round(64 / nodes[this.inputNodeId].listOfNotes.length));
          this.currentMidi.note = nodes[this.inputNodeId].listOfNotes[rand];
          results = [];
          for (outId = i = 0, ref = this.outputs[0].outputNodeIds.length; 0 <= ref ? i < ref : i > ref; outId = 0 <= ref ? ++i : --i) {
            results.push(nodes[this.outputs[0].outputNodeIds[outId]].sendMIDI(this.currentMidi));
          }
          return results;
        }
      } catch (error) {
        err = error;
      }
    };

    RandomMIDI.prototype.onParametersChange = function() {
      this.speed = 40 - parseInt(this.getParameterValue('speed') * 40) + 1;
      return this.currentMidi.duration = this.getParameterValue('duration') * 2;
    };

    return RandomMIDI;

  })(Node);

  ArpegioMIDI = (function(superClass) {
    extend(ArpegioMIDI, superClass);

    function ArpegioMIDI(x, y) {
      var outputs;
      this.title = "Arpegio MIDI";
      outputs = [
        {
          name: 'midi out',
          type: 'midi',
          value: 'C2'
        }
      ];
      this.parameters = [
        {
          name: "type",
          values: ["down", "up"],
          current: "down",
          type: "dropdown",
          hasInput: false
        }, {
          name: "duration",
          current: 0.1,
          type: "float",
          hasInput: false
        }, {
          name: "speed",
          current: 0.75,
          type: "float",
          hasInput: false
        }
      ];
      this.currentMidi = {
        note: "C3",
        duration: 0.2
      };
      this.speed = 0;
      this.count = 0;
      this.type = "down";
      ArpegioMIDI.__super__.constructor.call(this, x, y, 16, 64, outputs, "note_array");
    }

    ArpegioMIDI.prototype.update = function(time) {
      var err, i, outId, ref, results, scale;
      try {
        scale = 16;
        this.ctx.fillStyle = $('.window').css('backgroundColor');
        this.ctx.globalAlpha = 0.1;
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
        if (time % this.speed === 0) {
          if (this.type === "down") {
            this.count++;
            if (this.count > nodes[this.inputNodeId].listOfNotes.length - 1) {
              this.count = 0;
            }
          } else if (this.type === "up") {
            this.count--;
            if (this.count < 0) {
              this.count = nodes[this.inputNodeId].listOfNotes.length - 1;
            }
          }
          this.ctx.fillStyle = "#fff";
          this.ctx.globalAlpha = 1;
          this.ctx.fillRect(0, Math.round((64 / nodes[this.inputNodeId].listOfNotes.length) * this.count), scale, Math.round(64 / nodes[this.inputNodeId].listOfNotes.length));
          this.currentMidi.note = nodes[this.inputNodeId].listOfNotes[this.count];
          results = [];
          for (outId = i = 0, ref = this.outputs[0].outputNodeIds.length; 0 <= ref ? i < ref : i > ref; outId = 0 <= ref ? ++i : --i) {
            results.push(nodes[this.outputs[0].outputNodeIds[outId]].sendMIDI(this.currentMidi));
          }
          return results;
        }
      } catch (error) {
        err = error;
      }
    };

    ArpegioMIDI.prototype.onParametersChange = function() {
      this.speed = 40 - parseInt(this.getParameterValue('speed') * 40) + 1;
      this.type = this.getParameterValue('type');
      return this.currentMidi.duration = this.getParameterValue('duration') * 2;
    };

    return ArpegioMIDI;

  })(Node);

  Oscillator = (function(superClass) {
    extend(Oscillator, superClass);

    function Oscillator(x, y) {
      var inputs, outputs;
      this.title = "Oscillator";
      outputs = [
        {
          name: 'synth out',
          type: 'synth'
        }
      ];
      inputs = [
        {
          name: 'osc type',
          type: 'osc type'
        }
      ];
      this.parameters = [
        {
          name: "osc type",
          values: ["sine0", "sine8", "triangle100", "square100", "sawtooth100"],
          current: "triangle100",
          type: "dropdown",
          hasInput: false
        }, {
          name: "env attack",
          current: 0.005,
          type: "float",
          hasInput: false
        }, {
          name: "env decay",
          current: 0.1,
          type: "float",
          hasInput: false
        }, {
          name: "env sustain",
          current: 0.3,
          type: "float",
          hasInput: false
        }, {
          name: "env release",
          current: 0.1,
          type: "float",
          hasInput: false
        }
      ];
      this.synth = new Tone.PolySynth();
      Oscillator.__super__.constructor.call(this, x, y, 0, 0, outputs, "midi");
    }

    Oscillator.prototype.update = function(time) {};

    Oscillator.prototype.sendMIDI = function(midi) {
      if (midi.note !== "-") {
        return this.synth.triggerAttackRelease(midi.note, midi.duration);
      }
    };

    Oscillator.prototype.onParametersChange = function() {
      return this.synth.set({
        oscillator: {
          type: this.getParameterValue('osc type')
        },
        envelope: {
          attack: this.getParameterValue('env attack'),
          decay: this.getParameterValue('env decay'),
          sustain: this.getParameterValue('env sustain'),
          release: this.getParameterValue('env release') * 10
        }
      });
    };

    return Oscillator;

  })(Node);

  Reverb = (function(superClass) {
    extend(Reverb, superClass);

    function Reverb(x, y) {
      var outputs;
      this.title = "Reverb";
      outputs = [
        {
          name: 'synth out',
          type: 'synth'
        }
      ];
      this.parameters = [
        {
          name: "room size",
          current: 0.84,
          type: "float",
          hasInput: false
        }, {
          name: "wet",
          current: 0.12,
          type: "float",
          hasInput: false
        }
      ];
      this.synth = new Tone.Freeverb();
      Reverb.__super__.constructor.call(this, x, y, 0, 0, outputs, "synth");
    }

    Reverb.prototype.update = function(time) {};

    Reverb.prototype.onConnect = function(id) {
      console.log(nodes[id].title + " connected to " + this.title);
      return nodes[id].synth.connect(this.synth);
    };

    Reverb.prototype.onDisconnect = function(id) {
      console.log(nodes[id].title + " disconnected from " + this.title);
      return nodes[id].synth.disconnect(this.synth);
    };

    Reverb.prototype.onParametersChange = function() {
      return this.synth.set({
        roomSize: this.getParameterValue('room size'),
        wet: this.getParameterValue('wet')
      });
    };

    return Reverb;

  })(Node);

  Delay = (function(superClass) {
    extend(Delay, superClass);

    function Delay(x, y) {
      var outputs;
      this.title = "Delay";
      outputs = [
        {
          name: 'synth out',
          type: 'synth'
        }
      ];
      this.parameters = [
        {
          name: "time",
          current: 0.25,
          type: "float",
          hasInput: false
        }, {
          name: "feedback",
          current: 0.3,
          type: "float",
          hasInput: false
        }
      ];
      this.synth = new Tone.FeedbackDelay();
      Delay.__super__.constructor.call(this, x, y, 0, 0, outputs, "synth");
    }

    Delay.prototype.update = function(time) {};

    Delay.prototype.onConnect = function(id) {
      console.log(nodes[id].title + " connected to " + this.title);
      return nodes[id].synth.connect(this.synth);
    };

    Delay.prototype.onDisconnect = function(id) {
      console.log(nodes[id].title + " disconnected from " + this.title);
      return nodes[id].synth.disconnect(this.synth);
    };

    Delay.prototype.onParametersChange = function() {
      return this.synth.set({
        delayTime: parseFloat(this.getParameterValue('time')) * 5,
        feedback: this.getParameterValue('feedback')
      });
    };

    return Delay;

  })(Node);

  Distortion = (function(superClass) {
    extend(Distortion, superClass);

    function Distortion(x, y) {
      var outputs;
      this.title = "Distortion";
      outputs = [
        {
          name: 'synth out',
          type: 'synth'
        }
      ];
      this.parameters = [
        {
          name: "distortion",
          current: 0.4,
          type: "float",
          hasInput: false
        }
      ];
      this.synth = new Tone.Distortion(0.8);
      Distortion.__super__.constructor.call(this, x, y, 0, 0, outputs, "synth");
    }

    Distortion.prototype.update = function(time) {};

    Distortion.prototype.onConnect = function(id) {
      console.log(nodes[id].title + " connected to " + this.title);
      return nodes[id].synth.connect(this.synth);
    };

    Distortion.prototype.onDisconnect = function(id) {
      console.log(nodes[id].title + " disconnected from " + this.title);
      return nodes[id].synth.disconnect(this.synth);
    };

    Distortion.prototype.onParametersChange = function() {
      return this.synth.set({
        distortion: this.getParameterValue('distortion')
      });
    };

    return Distortion;

  })(Node);

  Mix = (function(superClass) {
    extend(Mix, superClass);

    function Mix(x, y) {
      this.title = "Mix";
      this.volume = new Tone.Volume();
      this.volume.connect(Tone.Master);
      this.parameters = [
        {
          name: "volume",
          current: 0.74,
          type: "float",
          hasInput: false
        }
      ];
      Mix.__super__.constructor.call(this, x, y, 0, 64, [], "synth");
    }

    Mix.prototype.update = function(time) {};

    Mix.prototype.sendMIDI = function(midi) {};

    Mix.prototype.onConnect = function(id) {
      console.log(nodes[id].title + " connected to " + this.title);
      return nodes[id].synth.connect(this.volume);
    };

    Mix.prototype.onDisconnect = function(id) {
      console.log(nodes[id].title + " disconnected from " + this.title);
      return nodes[id].synth.disconnect(this.volume);
    };

    Mix.prototype.onParametersChange = function() {
      return this.volume.set({
        volume: parseFloat(this.getParameterValue('volume') * 80) - 80 / 1.2
      });
    };

    return Mix;

  })(Node);

  addNode = function(node) {
    return window.nodes.push(node);
  };

  addNodeFromContenxt = function(constructor) {
    var rect;
    rect = document.getElementsByClassName('context-menu')[0].getClientRects()[0];
    window.nodes.push(new constructor(rect.x, rect.y));
    return closeContextMenu();
  };

  window.addNode = addNode;

  window.addNodeFromContenxt = addNodeFromContenxt;

  window.ListOfNotes = ListOfNotes;

  window.RandomMIDI = RandomMIDI;

  window.ArpegioMIDI = ArpegioMIDI;

  window.Oscillator = Oscillator;

  window.Reverb = Reverb;

  window.Delay = Delay;

  window.Distortion = Distortion;

  window.Mix = Mix;

}).call(this);
